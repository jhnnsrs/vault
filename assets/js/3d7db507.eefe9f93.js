"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7424],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),h=r,f=p["".concat(l,".").concat(h)]||p[h]||c[h]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},30892:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],s={id:"dashboard",title:"Dashboard",sidebar_label:"Dashboard",slug:"/dashboard"},l=void 0,d={unversionedId:"ele/dashboard",id:"ele/dashboard",title:"Dashboard",description:"Design",source:"@site/docs/ele/dashboard.md",sourceDirName:"ele",slug:"/dashboard",permalink:"/vault/docs/dashboard",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/ele/dashboard.md",tags:[],version:"current",frontMatter:{id:"dashboard",title:"Dashboard",sidebar_label:"Dashboard",slug:"/dashboard"},sidebar:"someSidebar",previous:{title:"GraphQL",permalink:"/vault/docs/graphql"},next:{title:"Real-Time Monitoring",permalink:"/vault/docs/macro"}},u={},c=[{value:"Design",id:"design",level:3},{value:"What are Dashboards",id:"what-are-dashboards",level:3},{value:"Our Example: HCS",id:"our-example-hcs",level:4},{value:"The difference between Tags and Metadata",id:"the-difference-between-tags-and-metadata",level:3},{value:"Code your Own",id:"code-your-own",level:3}],p={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"design"},"Design"),(0,o.kt)("p",null,"Flow Layer -> Datastore -> ETL"),(0,o.kt)("h3",{id:"what-are-dashboards"},"What are Dashboards"),(0,o.kt)("p",null,"Almost all real-time analysis pipelines need a way to intuitively monitor changes that happen during the\nacquistion/processing of data. We therefore provide a way to intuitively construct dashboards that are\nnothing but a website that can be used to monitor the results."),(0,o.kt)("p",null,"To understand how this is achieved we first need to understand where we position Dashboards."),(0,o.kt)("p",null,"Flow Layer -> Datastore -> Dashboards"),(0,o.kt)("p",null,"Dashboards are aggration points of your data. As such they are not participating in your workflow but take\nthe centralized data and its updates as an Input for monitoring. This means that through tagging and saving\nmetadata in your flow layer you provide a virtual template on how to monitor the data. This is why sometimes\nthinking about what you want in your Dashboard first can help you think about how to tag your data in the first place."),(0,o.kt)("h4",{id:"our-example-hcs"},"Our Example: HCS"),(0,o.kt)("p",null,"High content screening is a prime example for a use of a Dashboard:\nYou and your team are interested in the real time monitoring of organoid samples, and want a simple way of displaying\ndata and calculated metrics of a 6","*","6 Well acquistion process. You decide that you are interested in the time course of\ncell count development within these organoids and which image analysis tasks are necessary."),(0,o.kt)("p",null,"Your workflow looks something like this"),(0,o.kt)("p",null,"You decide Dashboard should visualize:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An image of all the Wells ",(0,o.kt)("strong",{parentName:"li"},"X")," with their corresponing latest ",(0,o.kt)("strong",{parentName:"li"},"z-color coded image")),(0,o.kt)("li",{parentName:"ul"},"Lines for each Well ",(0,o.kt)("strong",{parentName:"li"},"X")," represening timepoint ",(0,o.kt)("strong",{parentName:"li"},"T"),", and its respective ",(0,o.kt)("strong",{parentName:"li"},"cell count"))),(0,o.kt)("h3",{id:"the-difference-between-tags-and-metadata"},"The difference between Tags and Metadata"),(0,o.kt)("p",null,"It is a very fluid transition between the two: In general Metadata is data decribing in a key\nvalue manor aspects of the object. For example the position of an item in a multiwell setup"),(0,o.kt)("p",null,"The challenge for Tags and Metadata is"),(0,o.kt)("h3",{id:"code-your-own"},"Code your Own"),(0,o.kt)("p",null,"With Arkitekt and a little knowledge about React and HTML it is super easy to generate beautiful and functional Dashboards to\nshowcase your Data live."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function Dashboard(props) {\n  const { data, loading } = useMikroQuery(\n    gql`\n      query rois {\n        rois(representation: 100) {\n          id\n          type\n          creator {\n            id\n          }\n        }\n      }\n    `,\n    { pollInterval: 400 }\n  );\n\n  return <div>\n      {loading && <>Loading</>}\n      <div className="grid grid-cols-6">\n        {data &&\n          data.rois.map((roi) => (\n            <div>\n              <span>\n                {" "}\n                {roi.id} {roi.type}{" "}\n              </span>\n            </div>\n          ))}\n      </div>\n    </div>\n  ;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Clock(props) {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    var timerID = setInterval(() => tick(), 1000);\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  function tick() {\n    setDate(new Date());\n  }\n\n  return (\n    <div>\n      <h2>It is {date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n")),(0,o.kt)("p",null,"Just Try it out here. Interestet in different metrics? Use a different Query!"))}h.isMDXComponent=!0}}]);