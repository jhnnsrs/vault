"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7575],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return p}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),f=l(t),p=a,g=f["".concat(c,".").concat(p)]||f[p]||u[p]||o;return t?r.createElement(g,s(s({ref:n},m),{},{components:t})):r.createElement(g,s({ref:n},m))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},14522:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),s=["components"],i={id:"show_image",title:"Show Image",code_parser:"groovy",definition_parser:"yaml, meta",actor:"stacktostack",version:1,template:"yes",package:"mikro_j",interface:"show_image"},c=void 0,l={unversionedId:"macros/show_image",id:"macros/show_image",title:"Show Image",description:"Show Image",source:"@site/docs/macros/show.md",sourceDirName:"macros",slug:"/macros/show_image",permalink:"/vault/docs/macros/show_image",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/macros/show.md",tags:[],version:"current",frontMatter:{id:"show_image",title:"Show Image",code_parser:"groovy",definition_parser:"yaml, meta",actor:"stacktostack",version:1,template:"yes",package:"mikro_j",interface:"show_image"},sidebar:"someSidebar",previous:{title:"Real-Time Monitoring",permalink:"/vault/docs/macro"},next:{title:"Time-Lapse Color Coder",permalink:"/vault/docs/macros/time_lapse_color_coder"}},m={},u=[{value:"Show Image",id:"show-image",level:2},{value:"The ImageJ Macro",id:"the-imagej-macro",level:3}],f={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"show-image"},"Show Image"),(0,o.kt)("p",null,"Show Image takes an image and displays it in MikroJ"),(0,o.kt)("h3",{id:"the-imagej-macro"},"The ImageJ Macro"),(0,o.kt)("p",null,"Below is the listed image Macro"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},'var Glut = "Fire";  //default LUT\nvar Gstartf = 1;\nvar Gendf = 10;\nvar GFrameColorScaleCheck = 1;\nvar GbatchMode = 0;\n\nmacro "Time-Lapse Color Coder" {\nStack.getDimensions(ww, hh, channels, slices, frames);\nif (channels > 1)\n    exit("Cannot color-code multi-channel images!");\n//swap slices and frames in case:\nif ((slices > 1) && (frames == 1)) {\n    frames = slices;\n    slices = 1;\n    Stack.setDimensions(1, slices, frames);\n    print("slices and frames swapped");\n}\nGendf = frames;\nif (Gstartf <1) Gstartf = 1;\nif (Gendf > frames) Gendf = frames;\ntotalframes = Gendf - Gstartf + 1;\ncalcslices = slices * totalframes;\nimgID = getImageID();\n\nsetBatchMode(true);\n\nnewImage("colored", "RGB White", ww, hh, calcslices);\nrun("Stack to Hyperstack...", "order=xyczt(default) channels=1 slices="\n    + slices + " frames=" + totalframes + " display=Color");\nnewimgID = getImageID();\n\nselectImage(imgID);\nrun("Duplicate...", "duplicate");\nrun("8-bit");\nimgID = getImageID();\n\nnewImage("stamp", "8-bit White", 10, 10, 1);\nrun(Glut);\ngetLut(rA, gA, bA);\nclose();\nnrA = newArray(256);\nngA = newArray(256);\nnbA = newArray(256);\n\nnewImage("temp", "8-bit White", ww, hh, 1);\ntempID = getImageID();\n\nfor (i = 0; i < totalframes; i++) {\n    colorscale = floor((256 / totalframes) * i);\n    for (j = 0; j < 256; j++) {\n        intensityfactor = j / 255;\n        nrA[j] = round(rA[colorscale] * intensityfactor);\n        ngA[j] = round(gA[colorscale] * intensityfactor);\n        nbA[j] = round(bA[colorscale] * intensityfactor);\n    }\n\n    for (j = 0; j < slices; j++) {\n        selectImage(imgID);\n        Stack.setPosition(1, j + 1, i + Gstartf);\n        run("Select All");\n        run("Copy");\n\n        selectImage(tempID);\n        run("Paste");\n        setLut(nrA, ngA, nbA);\n        run("RGB Color");\n        run("Select All");\n        run("Copy");\n        run("8-bit");\n\n        selectImage(newimgID);\n        Stack.setPosition(1, j + 1, i + 1);\n        run("Select All");\n        run("Paste");\n    }\n}\n\nselectImage(tempID);\nclose();\n\nselectImage(imgID);\nclose();\n\nselectImage(newimgID);\n\nrun("Stack to Hyperstack...", "order=xyctz channels=1 slices="\n    + totalframes + " frames=" + slices + " display=Color");\nop = "start=1 stop=" + Gendf + " projection=[Max Intensity] all";\nrun("Z Project...", op);\nif (slices > 1)\n    run("Stack to Hyperstack...", "order=xyczt(default) channels=1 slices=" + slices\n        + " frames=1 display=Color");\nresultImageID = getImageID();\n\nselectImage(newimgID);\nclose();\n\nselectImage(resultImageID);\n\nif (GbatchMode == 0)\n    setBatchMode("exit and display");\n}\n\n')))}p.isMDXComponent=!0}}]);